Index: Asistente.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport pyttsx3\r\nimport speech_recognition as sr\r\nimport pywhatkit\r\nimport webbrowser\r\nimport datetime\r\nimport time\r\nimport json\r\nfrom PIL import Image\r\nimport time\r\nfrom Persona import Persona\r\nimport os\r\nusuarios = list()\r\n\r\ndef audio_to_text(timeout=10):\r\n    # Recognizer\r\n    r = sr.Recognizer()\r\n\r\n    # Configurar el micro\r\n    with sr.Microphone() as origen:\r\n        # Tiempo de espera desde que se activa el micro\r\n        r.pause_threshold = 0.5\r\n\r\n        # Informar que comenzó la grabación\r\n        print('Puedes comenzar a hablar')\r\n        start_time = time.time()\r\n\r\n        # Guardar audio\r\n        while time.time() - start_time < timeout:\r\n            audio = r.listen(origen)\r\n            try:\r\n                # Buscar en google lo escuchado\r\n                text = r.recognize_google(audio, language='es-es')\r\n                print(text)\r\n                return text.lower()\r\n            except sr.UnknownValueError:\r\n                print('Ups, no entendí lo que dijiste')\r\n                return 'Esperando'\r\n            except sr.RequestError:\r\n                print('Ups, sin servicio')\r\n                return 'Esperando'\r\n            except Exception as e:\r\n                print(f'Ups, algo ha salido mal: {e}')\r\n                return 'Esperando'\r\n\r\n        print('Tiempo de espera agotado')\r\n        return 'Esperando'\r\n\r\n\r\n\r\ndef talk(msg):\r\n    newVoiceRate = 160\r\n\r\n    engine = pyttsx3.init()\r\n    engine.setProperty('rate', newVoiceRate)\r\n    engine.say(msg)\r\n    engine.runAndWait()\r\n\r\n\r\ndef print_voices():\r\n    engine = pyttsx3.init()\r\n    for voz in engine.getProperty('voices'):\r\n        print(voz.id, voz)\r\n\r\ndef saludo():\r\n\r\n    hour = datetime.datetime.now()\r\n    if hour.hour < 6 or hour.hour > 20:\r\n        momento = 'Buenas noches.'\r\n    elif 6 <= hour.hour < 13:\r\n        momento = 'Buenos días.'\r\n    else:\r\n        momento = 'Buenas tardes.'\r\n\r\n    talk(f'{momento} Soy el bicho, tu asistente personal.')\r\n\r\n\r\n\r\ndef guardar_datos_personas(personas):\r\n    dict_instances = {}\r\n    for persona in personas:\r\n        dict_instances[persona.name] = persona.to_dict()\r\n        dict_instances[persona.image] = persona.to_dict()\r\n\r\n    result = {'Persona': dict_instances}\r\n\r\n    with open('datos_personas.json', 'w') as json_file:\r\n        json.dump(result, json_file, indent=2)\r\n    talk('Datos de personas guardados exitosamente.')\r\n\r\ndef cargar_datos_personas():\r\n    try:\r\n        with open('datos_personas.json', 'r') as json_file:\r\n            data = json.load(json_file)\r\n            dict_instances = data.get('Persona', {})  # Utilizar la clave 'Persona'\r\n            personas = []\r\n\r\n            for name, persona_data in dict_instances.items():\r\n                nueva_persona = Persona(name, persona_data['image'])\r\n                personas.append(nueva_persona)\r\n\r\n            return personas\r\n    except FileNotFoundError:\r\n        return []\r\n\r\ndef registro():\r\n    talk('Dime tu nombre, por favor.')\r\n\r\n    # Establecer un límite de tiempo para la entrada del nombre (10 segundos en este caso)\r\n    name = audio_to_text(timeout=10).lower()\r\n\r\n    if name == 'esperando':\r\n        talk('No se ha podido capturar correctamente tu nombre. Por favor, intenta nuevamente.')\r\n        return None\r\n\r\n    print(name)\r\n    ruta_imagen, result = takePhoto(name)\r\n\r\n    if result:\r\n        newUser = Persona(name, ruta_imagen)\r\n        usuarios.append(newUser)\r\n        mensaje = f'{name} registrado exitosamente.'\r\n        talk(mensaje)\r\n        return newUser  # Devolver la nueva persona creada\r\n    else:\r\n        talk('El registro no ha podido realizarse correctamente.')\r\n        return None\r\n\r\n\r\ndef takePhoto(name):\r\n    # Abre la cámara\r\n    cap = cv2.VideoCapture(0)\r\n    if not cap.isOpened():\r\n        talk(\"Error: No se pudo abrir la cámara.\")\r\n        return None, False\r\n\r\n    # Intenta establecer una tasa de fotogramas más alta\r\n    cap.set(cv2.CAP_PROP_FPS, 120)  # Ajusta a 30 FPS, puedes experimentar con otros valores\r\n\r\n    # Muestra la vista previa de la cámara\r\n    talk(\"Preparándose para tomar la foto. Por favor, sonríe.\")\r\n\r\n    # Crea una ventana para mostrar la vista previa\r\n    cv2.namedWindow('Reconocimiento Facial', cv2.WINDOW_NORMAL)\r\n\r\n    # Inicia un bucle para mostrar la transmisión en tiempo real durante la cuenta atrás\r\n    for i in range(4, 0, -1):\r\n        # Captura un fotograma\r\n        ret, frame = cap.read()\r\n        if not ret:\r\n            talk(\"Error al capturar la foto.\")\r\n            break\r\n\r\n        # Muestra la imagen actualizada en la ventana\r\n        cv2.imshow('Reconocimiento Facial', frame)\r\n\r\n        # Espera 1 segundo entre cada cuenta regresiva\r\n        time.sleep(1)\r\n        talk(str(i))\r\n\r\n    # Cierra la ventana de vista previa\r\n    cv2.destroyWindow('Reconocimiento Facial')\r\n\r\n    # Captura un solo fotograma después de la cuenta atrás\r\n    ret, frame = cap.read()\r\n    if ret:\r\n        # Guarda la foto\r\n        cv2.imwrite(f\"{name}.jpg\", frame)\r\n        talk(f\"Foto capturada y guardada como '{name}.jpg'\")\r\n        # Libera la cámara\r\n        cap.release()\r\n        return frame, True\r\n    else:\r\n        talk(\"Error al capturar la foto.\")\r\n        # Libera la cámara\r\n        cap.release()\r\n        return None, False\r\n\r\ndef comprobarRegistro():\r\n    talk('¿Que usuario deseas comprobar?')\r\n    name = audio_to_text().lower()\r\n    found = False\r\n    for p in usuarios:\r\n        if p.name == name:\r\n            found = True\r\n    return found\r\n\r\ndef showUsers():\r\n    for persona in usuarios:\r\n        print(persona.name)\r\n\r\n\r\ndef requests():\r\n    saludo()\r\n    stop = False\r\n    while not stop:\r\n        talk('¿Qué deseas hacer?')\r\n        request = audio_to_text().lower()\r\n        print(request)\r\n        if 'abrir youtube' in request:\r\n            talk('Abriendo youtube')\r\n            webbrowser.open('https://www.youtube.com')\r\n        elif 'salir' in request:\r\n            talk('Hasta luego bombón')\r\n            # Guardar la información antes de salir\r\n            guardar_datos_personas(usuarios)\r\n            exit()\r\n        elif 'registrarse' in request:\r\n            nueva_persona = registro()\r\n            if nueva_persona:\r\n                usuarios.append(nueva_persona)\r\n                # Guardar la información después de registrar\r\n                guardar_datos_personas(usuarios)\r\n        elif 'comprobar registro' in request:\r\n            if comprobarRegistro():\r\n                talk('El usuario está registrado en el sistema')\r\n            else:\r\n                talk('El usuario no está registrado en el sistema')\r\n        elif 'listar usuarios' in request:\r\n            showUsers()\r\n            talk('Estos son los usuarios registrados:')\r\n            for persona in usuarios:\r\n                talk(persona.name)\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Asistente.py b/Asistente.py
--- a/Asistente.py	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
+++ b/Asistente.py	(date 1706282416770)
@@ -1,13 +1,14 @@
 import cv2
 import pyttsx3
 import speech_recognition as sr
-import pywhatkit
 import webbrowser
 import datetime
 import time
 import json
 from PIL import Image
 import time
+
+from FacialRecognition import FacialRecognition
 from Persona import Persona
 import os
 usuarios = list()
@@ -79,8 +80,9 @@
 def guardar_datos_personas(personas):
     dict_instances = {}
     for persona in personas:
-        dict_instances[persona.name] = persona.to_dict()
-        dict_instances[persona.image] = persona.to_dict()
+        # Convierte la imagen de numpy.ndarray a una tupla hashable
+        image_key = tuple(persona.image.flatten())
+        dict_instances[persona.name] = {'image': image_key, **persona.to_dict()}
 
     result = {'Persona': dict_instances}
 
@@ -88,6 +90,7 @@
         json.dump(result, json_file, indent=2)
     talk('Datos de personas guardados exitosamente.')
 
+
 def cargar_datos_personas():
     try:
         with open('datos_personas.json', 'r') as json_file:
@@ -144,7 +147,7 @@
     cv2.namedWindow('Reconocimiento Facial', cv2.WINDOW_NORMAL)
 
     # Inicia un bucle para mostrar la transmisión en tiempo real durante la cuenta atrás
-    for i in range(4, 0, -1):
+    for i in range(3, 0, -1):
         # Captura un fotograma
         ret, frame = cap.read()
         if not ret:
@@ -155,7 +158,6 @@
         cv2.imshow('Reconocimiento Facial', frame)
 
         # Espera 1 segundo entre cada cuenta regresiva
-        time.sleep(1)
         talk(str(i))
 
     # Cierra la ventana de vista previa
@@ -221,6 +223,14 @@
             talk('Estos son los usuarios registrados:')
             for persona in usuarios:
                 talk(persona.name)
+        elif 'iniciar sesión' in request:
+            folder_path = 'C:\\Users\\Alumno\\Desktop\\SGE_Reconocimiento\\caras'
+            facial_recognition = FacialRecognition()
+            reconocido, nombre_encontrado = facial_recognition.run(folder_path)
+            if reconocido:
+                talk(f"Bienvenido, {nombre_encontrado}!")
+            else:
+                talk("No se encontró ninguna coincidencia con los usuarios registrados.")
 
 
 
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39__Changes_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39__Changes_1.xml	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
+++ /dev/null	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1" date="1705520363687" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 17/01/2024 20:39 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
+++ /dev/null	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
@@ -1,190 +0,0 @@
-Index: Asistente.py
-===================================================================
-diff --git a/Asistente.py b/Asistente.py
-deleted file mode 100644
---- a/Asistente.py	
-+++ /dev/null	
-@@ -1,183 +0,0 @@
--import cv2
--import speech_recognition as sr
--import os
--
--class Asistente:
--    def __init__(self):
--        self.usuarios_registrados = {}
--
--    def reconocer_usuario_con_camara(self):
--        # Inicializar el clasificador facial de OpenCV
--        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
--        # Inicializar la cámara
--        cap = cv2.VideoCapture(0)
--
--        while True:
--            # Capturar el fotograma
--            ret, frame = cap.read()
--
--            # Convertir a escala de grises para el reconocimiento facial
--            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
--
--            # Detectar rostros en el fotograma
--            faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))
--
--            for (x, y, w, h) in faces:
--                # Dibujar un rectángulo alrededor del rostro detectado
--                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
--
--                # Recortar la región del rostro
--                roi_gray = gray[y:y+h, x:x+w]
--
--                # Devolver el nombre del usuario si es reconocido
--                nombre_usuario = self.reconocer_usuario_en_imagen(roi_gray)
--                if nombre_usuario:
--                    cap.release()
--                    cv2.destroyAllWindows()
--                    return nombre_usuario
--
--            # Mostrar el fotograma con el rectángulo alrededor del rostro
--            cv2.imshow('Reconocimiento Facial', frame)
--
--            # Si no hay usuarios registrados, tomar una foto y cerrar la cámara
--            if not self.usuarios_registrados:
--                print("Usuario no registrado. Tomando foto y cerrando la cámara...")
--                ruta_imagen = self.tomar_foto_y_cerrar_camara()
--                nombre_usuario = self.reconocer_voz()
--
--                # Registrar al usuario
--                self.usuarios_registrados[nombre_usuario] = {
--                    'foto': ruta_imagen
--                }
--                print(f"Usuario {nombre_usuario} registrado con éxito en {ruta_imagen}.")
--                return nombre_usuario
--
--            # Salir si se presiona la tecla 'Esc'
--            if cv2.waitKey(1) == 27:
--                cap.release()
--                cv2.destroyAllWindows()
--                return None
--
--    def mostrar_camara(self):
--        # Inicializar la cámara
--        cap = cv2.VideoCapture(0)
--
--        while True:
--            # Capturar el fotograma
--            ret, frame = cap.read()
--
--            # Mostrar el fotograma en una ventana
--            cv2.imshow('Vista de la Cámara', frame)
--
--            # Salir si se presiona la tecla 'Esc'
--            if cv2.waitKey(1) == 27:
--                cap.release()
--                cv2.destroyAllWindows()
--                break
--
--    def tomar_foto_y_cerrar_camara(self):
--        cap = cv2.VideoCapture(0)
--
--        # Capturar el fotograma
--        ret, frame = cap.read()
--
--        # Guardar la imagen en un archivo
--        ruta_imagen = self.reconstruir_nombre_imagen("temp_user")
--        cv2.imwrite(ruta_imagen, frame)
--
--        cap.release()
--        cv2.destroyAllWindows()
--
--        return ruta_imagen
--
--    def reconocer_usuario_en_imagen(self, imagen):
--        for nombre_usuario, datos_usuario in self.usuarios_registrados.items():
--            foto_registrada = cv2.imread(datos_usuario['foto'], cv2.IMREAD_GRAYSCALE)
--            # Aquí puedes utilizar algún método de comparación de características, como la correlación
--            correlacion = cv2.matchTemplate(imagen, foto_registrada, cv2.TM_CCOEFF_NORMED)
--            # if correlacion > umbral_de_correlacion:
--            if correlacion > 0.6:
--                return nombre_usuario
--        return None
--
--    def capturar_imagen(self, nombre_usuario):
--        # Inicializar la cámara
--        cap = cv2.VideoCapture(0)
--
--        # Capturar el fotograma
--        ret, frame = cap.read()
--
--        # Guardar la imagen en un archivo
--        ruta_imagen = self.reconstruir_nombre_imagen(nombre_usuario)
--        cv2.imwrite(ruta_imagen, frame)
--
--        cap.release()
--        cv2.destroyAllWindows()
--
--        return ruta_imagen
--
--    def reconstruir_nombre_imagen(self, nombre_usuario):
--        return f"{nombre_usuario.replace(' ', '_')}.jpg"
--
--    def reconocer_voz(self):
--        recognizer = sr.Recognizer()
--
--        with sr.Microphone() as source:
--            print("Escuchando... Di tu nombre:")
--            audio = recognizer.listen(source)
--
--        try:
--            nombre_usuario = recognizer.recognize_google(audio, language="es-ES").lower()
--            print(f"Nombre reconocido por voz: {nombre_usuario}")  # Mensaje de depuración
--            return nombre_usuario
--        except sr.UnknownValueError:
--            print("No se pudo entender el nombre")
--            return "No se pudo entender el nombre"
--        except sr.RequestError as e:
--            print(f"Error en la solicitud de reconocimiento de voz: {e}")
--            return f"Error en la solicitud de reconocimiento de voz: {e}"
--
--    def controlar_asistencia(self):
--        orden = self.reconocer_voz()
--        print(f"Orden reconocida: {orden}")
--
--        if "iniciar reconocimiento" in orden:
--            print("Iniciando reconocimiento facial...")
--            self.mostrar_camara()
--            nombre_usuario = self.reconocer_usuario_con_camara()
--
--            if nombre_usuario:
--                print(f"Bienvenido, {nombre_usuario}.")
--            else:
--                print("Usuario no reconocido. ¿Desea registrarse?")
--
--    def registrar_usuario(self):
--        orden = self.reconocer_voz()
--
--        if "registrar usuario" in orden:
--            nombre_usuario = self.reconocer_voz()
--
--            # Verificar si el directorio "caras" existe, si no, crearlo
--            if not os.path.exists("caras"):
--                os.makedirs("caras")
--
--            # Capturar la imagen con la webcam
--            ruta_imagen = os.path.join("caras", f"{nombre_usuario.replace(' ', '_')}.jpg")
--            cap = cv2.VideoCapture(0)
--            ret, frame = cap.read()
--            cv2.imwrite(ruta_imagen, frame)
--            cap.release()
--            cv2.destroyAllWindows()
--
--            # Registrar al usuario
--            self.usuarios_registrados[nombre_usuario] = {
--                'foto': ruta_imagen
--            }
--            print(f"Usuario {nombre_usuario} registrado con éxito en {ruta_imagen}.")
--
--    def salir_aplicacion(self):
--        orden = self.reconocer_voz()
--
--        if "salir de la aplicación" in orden:
--            print("Hasta luego. Gracias por usar la aplicación de reconocimiento facial.")
--            exit()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (venv)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
+++ b/.idea/misc.xml	(date 1706282549247)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (venv)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a3f0a12a-3167-4b59-ae80-44ba719021a9\" name=\"Changes\" comment=\"Arreglando json\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Asistente.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Asistente.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Persona.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Persona.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/PyWhatKit_DB.txt\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"jose_tarea1\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2b2FLwVPA3jwW5H55TnlsUcxTSU\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;jose__tarea1&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Alumno/Desktop/ExamenPythonJoseVicenteVargas&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Miguel\\PycharmProjects\\SGE_Reconocimiento\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"SGE_Reconocimiento\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a3f0a12a-3167-4b59-ae80-44ba719021a9\" name=\"Changes\" comment=\"\" />\r\n      <created>1705405215052</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1705405215052</updated>\r\n      <workItem from=\"1705410644813\" duration=\"502000\" />\r\n      <workItem from=\"1705416073913\" duration=\"748000\" />\r\n      <workItem from=\"1705417232323\" duration=\"44000\" />\r\n      <workItem from=\"1705417813751\" duration=\"2206000\" />\r\n      <workItem from=\"1705500402331\" duration=\"2425000\" />\r\n      <workItem from=\"1705517271818\" duration=\"2524000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Camara activada\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705506946676</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705506946676</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Camara activada\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705506967820</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705506967820</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Tomar foto\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705518803993</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705518803993</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Borrado\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705520626383</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705520626383</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Borrado\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705520674433</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705520674433</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Cositaassss\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705521709292</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705521709292</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Cositaassss\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705521730958</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705521730958</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Gurdando imagenes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705689135548</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705689135548</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Arreglando json\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705692058443</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705692058443</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/jose_tarea1\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Camara activada\" />\r\n    <MESSAGE value=\"Tomar foto\" />\r\n    <MESSAGE value=\"Borrado\" />\r\n    <MESSAGE value=\"Cositaassss\" />\r\n    <MESSAGE value=\"Gurdando imagenes\" />\r\n    <MESSAGE value=\"Arreglando json\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Arreglando json\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3ce9e0e2a78f7db9400d2ee0de805838110eb191)
+++ b/.idea/workspace.xml	(date 1706282549229)
@@ -4,13 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a3f0a12a-3167-4b59-ae80-44ba719021a9" name="Changes" comment="Arreglando json">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="a3f0a12a-3167-4b59-ae80-44ba719021a9" name="Changes" comment="Vamos a ver si podemos hacer esto">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_17_01_2024_20_39__Changes_1.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Asistente.py" beforeDir="false" afterPath="$PROJECT_DIR$/Asistente.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Persona.py" beforeDir="false" afterPath="$PROJECT_DIR$/Persona.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/PyWhatKit_DB.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,7 +31,7 @@
     </option>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="jose_tarea1" />
+        <entry key="$PROJECT_DIR$" value="DEV" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -49,30 +47,32 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python.main.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;jose__tarea1&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/Alumno/Desktop/ExamenPythonJoseVicenteVargas&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.main.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "jose__tarea1",
+    "last_opened_file_path": "C:/Users/Alumno/Desktop/ExamenPythonJoseVicenteVargas",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\Alumno\Desktop\SGE_Reconocimiento" />
       <recent name="C:\Users\Miguel\PycharmProjects\SGE_Reconocimiento" />
     </key>
   </component>
   <component name="RunManager">
     <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="SGE_Reconocimiento" />
+      <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
       <envs>
@@ -205,7 +205,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="origin/jose_tarea1" />
+                        <option value="jose_tarea1" />
                       </list>
                     </value>
                   </entry>
@@ -226,4 +226,7 @@
     <MESSAGE value="Arreglando json" />
     <option name="LAST_COMMIT_MESSAGE" value="Arreglando json" />
   </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/SGE_Reconocimiento$main.coverage" NAME="main Coverage Results" MODIFIED="1706121064512" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+  </component>
 </project>
\ No newline at end of file
